<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-06-06T08:28:55-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">MORESCODE ANALYTICS LLC</title><subtitle>Full-service data science, analytics, and statistical consulting.
</subtitle><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><entry><title type="html">Catch A Vibe Code</title><link href="http://localhost:4000/2025/06/03/catch-a-vibe-code.html" rel="alternate" type="text/html" title="Catch A Vibe Code" /><published>2025-06-03T00:00:00-05:00</published><updated>2025-06-03T00:00:00-05:00</updated><id>http://localhost:4000/2025/06/03/catch-a-vibe-code</id><content type="html" xml:base="http://localhost:4000/2025/06/03/catch-a-vibe-code.html"><![CDATA[<p>I joined an ai for conservation slack group recently. In that group, one of the developers of SpeciesNet (<a href="/2025/05/22/camera-trap-computer-vision.html">camera trap computer vision</a>) and the creator of the MegaDetector object detection model, <a href="https://github.com/agentmorris">Dan Morris</a>, hosted a “Vibe coding party” this week.</p>

<p>The tools for agentic coding are developing rapidly - the point of the party was to start learning and using them now, so that in 6 months we have a much better understanding of the landscape.</p>

<blockquote>
  <p>“If you are using AI for autocompletion, that’s great, but <strong>if you’re using only AI for autocompletion, you may be at a counterproductive local maximum.</strong>  I.e., you may be better off <em>not</em> using AI for autocomplete if it forces you to re-think how you use AI.” - Dan Morris</p>
</blockquote>

<p>So, this week I spent some time at the Vibe coding party and afterwards trying to see if AI could help me quickly contribute features to the website that Urban Rivers uses to have volunteers help label camera trap images – and then for fun, trying to make GAMES!</p>

<h2 id="using-jules-on-a-massive-code-base-for-urban-rivers-ranger-website">Using <a href="https://jules.google.com/">Jules</a> on a massive code base for Urban Rivers <a href="https://rangers.urbanrivers.org/">ranger website</a>.</h2>
<p>The wildmile codebase is &gt;45k lines of code - written in Next.js with MongoDB integrations. Between Frontend, Backend, Models, Actions, Utils, and Tests, and having not previously contributed to the project or spent any real time learning the languages - I’ve hit several barriers to being able to contribute.</p>

<p>We’ve wanted to expand our rewards and recognition systems to motivate people who are able to contribute daily or weekly - more than just once.  There’s already a system to add badges - which as an admin I’ve been able to add to. For example, Here’s one you get after labeling 9000! images along with 700 points - generated using chatGPT image mode:</p>

<p><img src="/assets/images/ai-part-one/1_exbadge.png" width="200" /></p>

<p>I have this idea that by logging in weekly, people will be ‘taking care of the river.’  Conceptually, we can create a ‘tomagachi-pal-like’ image of the river, and each week the picture shared gets prettier, until it looks like a very nice, boardwalk lined, wetlands environment.  This then could be picked up as a sticker from Urban Rivers - or mailed - or awarded at a social.</p>

<p>The existing system was struggling with login cookies so we decided to change it to an “actions” based system - where any valid action (labeling observations) within a day is considered an active day and can increase the streak.</p>

<p>Here’s what I prompted Jules with:</p>
<blockquote>
  <p>we have a series of cards that display the user progress and update the streak ex:</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UserProgressSchema.methods.updateStreak = function () { const today = new Date(); const lastLogin &gt;= this.streaks.lastLoginDate;

if (!lastLogin) { this.streaks.current = 1; } else { const daysSinceLastLogin = Math.floor( (today &gt;- lastLogin) / (1000 * 60 * 60 * 24) );

if (daysSinceLastLogin === 1) {
 this.streaks.current += 1;
 this.streaks.longest = Math.max(
   this.streaks.current,
   this.streaks.longest
 );
} else if (daysSinceLastLogin &gt; 1) {
 this.streaks.current = 1;
}
}

this.streaks.lastLoginDate = today; };
</code></pre></div>  </div>
  <p>Instead of using the login date, we want to create a function to update a parameter about the user based on their last action on our site - a valid action would be saving an observation. Please make suggestions on how to implement this</p>
</blockquote>

<p>From there, Jules read in the entire codebase (I provided credentials), built a plan to edit the function, edited the 3 very specific files needed to change the feature, and - in noticing our lack of tests - added steps on how to implement an entire testing ecosystem.</p>

<p>Here’s a screengrab of where it shows the changes suggested:<br />
<img src="/assets/images/ai-part-one/3_jules.png" /></p>

<p>I pulled the branch into my local env to test out the changes and it loaded. Now, the test system didn’t work at all - but I do plan on getting jules to help with that again in the near future.</p>

<p>As of today, Jules is using Google Gemini 2.5 Pro.</p>

<p>See the <a href="https://github.com/nkwsy/Wildmile/pull/269">commit</a> here!</p>

<h2 id="using-claude-sonnet-35-as-a-cli-agent-to-get-it-running">Using claude sonnet 3.5 as a CLI agent to get it running.</h2>
<p>When I first tried to run the website locally to see if my changes worked, I couldn’t get the system running at all. After several chat prompts with an AI - I did manage to get something running - only to realize that the wrong drive was being used and needing to start over.</p>

<p>There was also a problem the first time I tried to submit the PR - my fork of the project was more than 170 commits behind the master branch! This was a gap in my own understanding - when I was merging with the master, I was merging with MY master, not the original. To fix this, all I had to do was hit the “refresh” button on my repo page.</p>

<p>After all of that - pulling the changes and syncing my main branch into my local server - I experimented with Claude Sonnet 3.5 in copilot within VSCode. The difference here being that the CLI version of the AI is able to see what my computer is (Windows) and how incompatibility issues with linux were causing the problems. It fixed things instantly.</p>

<p><img src="/assets/images/ai-part-one/4_copilot_claude.png" /></p>

<p>Given, this may have only taken a few google searches, but it’s something Jules was incapable of knowing - because Jules is entirely online on a VM.</p>

<h2 id="using-copilot-and-claude-to-make-a-game-for-elephant-conservation">Using copilot and claude to make a game for elephant conservation.</h2>
<p>In the last 30 minutes of the vibe coding party I suggested we all try to use AI to make a game - for fun &amp; to see how ‘one-shot’ prompting works these days (this was one of the ideas Dan had originally conceived for the party).  The premise for the game came from another conservation member - <a href="https://www.linkedin.com/in/prabath/">Prabath Gunawardane</a> - who was interested in creating a game that helped teach how elephant friendly deterrents could help prevent farm damage.</p>

<p>Here was my <a href="https://github.com/morescode-pm/elephriend-zone/blob/main/development-chat-log.md">prompt and chat log</a> to claude:</p>
<blockquote>
  <p>I would like to make a game I can run in my local browser called “Elephriend Zone” - it’s a game where elephants will be drawn to farms nearby and could damage them - damaging the farms is a game over condition - the player can build elephant safe de-motivation items on the map - please look up some elephant friendly options for this. For art we can start with simple shapes. Pick any language that is known to be low bandwith and run on a slow computer.</p>
</blockquote>

<p>And here’s <a href="https://github.com/morescode-pm/elephriend-zone">the repo</a> &amp; screen shot of the..</p>
<h3 id="elephriend-zone-game-you-can-actually-play"><strong><a href="https://morescode-pm.github.io/elephriend-zone/">Elephriend Zone</a> game you can actually play</strong>:</h3>

<p><img src="/assets/images/ai-part-one/5_elephriends.png" /></p>

<h2 id="in-summary">In Summary</h2>
<p>The most incredible part of all of this was that I only had to (barely) review the code, and figure out testing/deployment strategies. When you think about the time it would take to learn new languages just to be able to make one small change (months). This is truly an amazing thing.</p>

<!-- links  -->]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="ai" /><category term="html" /><category term="next.js" /><category term="css" /><category term="copilot" /><summary type="html"><![CDATA[I joined an ai for conservation slack group recently. In that group, one of the developers of SpeciesNet (camera trap computer vision) and the creator of the MegaDetector object detection model, Dan Morris, hosted a “Vibe coding party” this week.]]></summary></entry><entry><title type="html">Converting from HTML was a project</title><link href="http://localhost:4000/2025/05/30/starting-from-scratch.html" rel="alternate" type="text/html" title="Converting from HTML was a project" /><published>2025-05-30T00:00:00-05:00</published><updated>2025-05-30T00:00:00-05:00</updated><id>http://localhost:4000/2025/05/30/starting-from-scratch</id><content type="html" xml:base="http://localhost:4000/2025/05/30/starting-from-scratch.html"><![CDATA[<p>Wow, making a website in Jekyll is great, but it definitely has a learning curve.<br />
Even after purchasing a domain, figuring out the DNS records for github, and getting an HTML page initially stood up there was still a lot to learn.</p>

<p>Here are the steps I followed on windows:</p>
<ol>
  <li>Download Ruby (with Bundler by default) and Jekyll on Windows
    <ul>
      <li>Here’s the <a href="https://rubyinstaller.org/downloads/">Ruby+Devkit</a> for windows install page - I had to use 3.3.8-1</li>
    </ul>
  </li>
  <li>Read a bunch of how to guides that are based on varying deployments of jekyll and jekyll themes
    <ul>
      <li>Here’s a link to the most comprehensive walkthrough when using <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll">github pages with Jekyll</a>.</li>
    </ul>
  </li>
  <li>Double check that all software installed correctly in the Path variable.
    <ul>
      <li>This includes not installing the most up to date version of jekyll because github pages uses an older version. They will likely not update because of stability concerns for users.</li>
      <li>Confirm installs with <code class="language-plaintext highlighter-rouge">bundle exec jekyll -v</code>  and <code class="language-plaintext highlighter-rouge">ruby-v</code></li>
      <li>Very important Gemfile line: <code class="language-plaintext highlighter-rouge">gem "github-pages", "~&gt; 232", group: :jekyll_plugins</code></li>
    </ul>
  </li>
  <li>Spend a lot of time figuring out what the _config.yml file does and how to configure it.</li>
  <li>Learn about what <code class="language-plaintext highlighter-rouge">gems</code>, <code class="language-plaintext highlighter-rouge">bundler</code>, <code class="language-plaintext highlighter-rouge">_layouts</code> and <code class="language-plaintext highlighter-rouge">_includes</code> are for and what jinja syntax is being used in jekyll.</li>
  <li>More that I thought to myself “wow this would be good to write down” but didn’t.</li>
</ol>

<p><br />
What you get for all the effort:</p>
<ul>
  <li>Strong thematic elements across all pages.</li>
  <li>A templating implementation to avoid repeating yourself in html.</li>
  <li>The option to write posts in markdown and html - instead of all html.</li>
  <li>Examples from other users that you can use to improve your own site.</li>
  <li>An easy and auto-reloading localhost:4000 testing environment
    <ul>
      <li><code class="language-plaintext highlighter-rouge">bundle exec jekyll serve</code></li>
    </ul>
  </li>
  <li>Ultimately, the knowledge of how to do this again in the future and a fast way to add new projects.</li>
</ul>

<p><br />
Here’s a <a href="https://github.com/morescode-pm/portfolio/tree/gh-jekyll">link to the repo</a> where the project is stored.</p>]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="jekyll" /><category term="ruby" /><category term="html" /><summary type="html"><![CDATA[Wow, making a website in Jekyll is great, but it definitely has a learning curve. Even after purchasing a domain, figuring out the DNS records for github, and getting an HTML page initially stood up there was still a lot to learn.]]></summary></entry><entry><title type="html">Learning PowerBI</title><link href="http://localhost:4000/2025/05/25/learning-powerbi.html" rel="alternate" type="text/html" title="Learning PowerBI" /><published>2025-05-25T00:00:00-05:00</published><updated>2025-05-25T00:00:00-05:00</updated><id>http://localhost:4000/2025/05/25/learning-powerbi</id><content type="html" xml:base="http://localhost:4000/2025/05/25/learning-powerbi.html"><![CDATA[<p>Plant Co. Performance Dashboard.<br />
An example dataset from a fake company that sells real plants.<br />
The dashboard is interactive, so please click through to satisfy your curiosity (tip: the embedded dashboard can be resized to fit your full screen in the lower right corner).</p>

<iframe title="Plant Co Performance Report" width="788" height="505" src="https://app.powerbi.com/view?r=eyJrIjoiOWJmMTRmMjgtNWNiNC00ODkxLWJjMTItMDEyYjc0YzNlOTRlIiwidCI6ImQxMjE2YWM4LWFiOGQtNDg0ZC1hOTg2LTlmMGRmMmMxMjBmMCIsImMiOjJ9&amp;pageName=2195c7825b6c3b144e2f" frameborder="0" allowfullscreen="true">
</iframe>

<p><br /></p>

<p><em>Example Analysis:</em></p>
<h2 style="margin-top: 0"> October '23 year to date was less profitable than '22 by $0.15M:</h2>
<p>Focusing on the Gross Profit Year to Date (YTD) vs Prior Year to Date (PYTD) Waterfall Chart for 2023.<br />
It looks like October was our worst performing month relative to last year - we want to know why so we can make decisions to increase profitability next year.</p>

<p>First, hover over and then click on the “Click to turn on Drill down” arrow (1). Then click on the red bar for October (2).<br />
<img src="/assets/images/learning-powerbi/1_DrillDown.png" /></p>

<p>This waterfall chart has drill down information about country and product - when clicking on October, the first layer of detail shows us a list of all countries and their relative gross profit between 2023 and 2022. Here we can see 79k of the $148.41k less profit in 2023 came from accounts in China. This is reflected across all visuals in the dashboard and hovering over points/bars will show you more information.
<img src="/assets/images/learning-powerbi/2_Countries.png" /></p>

<p>Drilling further down by clicking on china we get a grouping by product category: Indoor, Landscape, and Outdoor.<br />
It looks like in 2023 we made less money on Outdoor and Landscape products than in 2022 but are making small improvements on Indoor products profits. Remember, at this point we are drilled down on “Gross Profit YTD (2023) vs PYTD (2022) for October 2023, from China.”
<img src="/assets/images/learning-powerbi/3_ProductGroup.png" /></p>

<p>Focusing in further on Outdoor we can get an idea of which specific plants are experiencing lower gross profits in 2023. For example, 4 of these products had $9-10k less gross profits in 2023 than 2022 - something definitely worth looking into more. (and we would repeat this for Landscape).
<img src="/assets/images/learning-powerbi/4_Products.png" /></p>

<p>To get a final list of the products we can just request a table view by right clicking on the graph. Tip: Use portrait or landscape view to  (because, yeah, reading long names from angled bar titles isn’t great) 
<img src="/assets/images/learning-powerbi/5_Tabled.png" /></p>

<p>Remember - this does not mean the products <em>LOST</em> money, it just means relative to last year they made less. So, maybe the products are falling out of favor in china, or maybe in 2022 there was an issue with these. It could also mean that the products are more perrenial, and in 2022 companies bought all the needed. So, when thinking about the next year we could update the catalog to offer products that are in more demand and produce less of the products out of demand for the chinese market.<br />
We could also look deeper at the account profitability segments, and try to advertize to the accounts related that are low value YTD, but high GP% (bottom right figure of the dashboard).</p>

<p><br /></p>

<p><em>How this was made:</em></p>
<h2 style="margin-top: 0"> Project Introduction and Data Cleaning </h2>
<p>This project was created following Mo Chen’s Power BI <a href="https://www.youtube.com/watch?v=BLxW9ZSuuVI&amp;t=92s">Tutorial</a>.<br />
The goal was to create a performance reporting dashboard for a company that would dynamically interact with user input. This type of tool is invaluable to businesses looking to better understand their sales and strategize for the future.</p>

<p>The Steps involved were:</p>
<ol>
  <li>Data gathering (power query, virtual tables)</li>
  <li>Modeling - Measures, calculated columns</li>
  <li>Visuals - Layout and Design</li>
  <li>Review and Publishing</li>
</ol>

<h3 id="data-sources"><em>Data sources:</em></h3>
<ul>
  <li>Excel Workbook with 3 Sheets:
    <ol>
      <li>Plant FACT (date, product id, quantity, price, cogs, account id)</li>
      <li>Accounts (account id, country, master id, lat/lon, postal code, street name)</li>
      <li>Plant_Hierarchy (product family, group, name, size, type)</li>
    </ol>
  </li>
</ul>

<p><em>Power Query:</em></p>
<ul>
  <li>Data was imported into Power Query for Transformation.</li>
  <li>Column names were cleaned and deduplication was run on any primary keys.</li>
  <li>Table names were cleaned and identified as FACT or DIM tables</li>
</ul>

<h3 id="data-model"><em>Data Model:</em></h3>
<ul>
  <li>New Table for Dates - This will be a major way we slice the data for analysis. Includes Date Hierarchies!
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  DIM_Date =  
  CALENDAR(  
      DATE(2022,01,01),  
      DATE(2024,12,31)  
  )
</code></pre></div>    </div>
  </li>
  <li>A boolean to check if the FACT_Sales row is before or after the sliced date (will be true for PYTD)
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  inPast = 
  VAR lastsalesdate = MAX(FACT_Sales[Date_Time]) # Finds the most recent sales date in FACT_Sales
  VAR lastsalesdatePY = EDATE(lastsalesdate, -12) # Calculates same date 12 months earlier
  RETURN
  DIM_Date[Date]&lt;=lastsalesdatePY # TRUE for any date in DIM_Date that is before latest sales date from prior year
</code></pre></div>    </div>
  </li>
  <li>Slicers:<br />
  Table of Slicer Values as “Enter Data” Type<br />
  “Sales”, “Gross Profit”, “Quantity</li>
  <li>Joins
    <ul>
      <li>FACT_Sales.Account_id = DIM_Account.Account_id</li>
      <li>FACT_Sales.Product_id = DIM_Product.Product_Name_id</li>
      <li>FACT_Sales.Date_Time = DIM_Date.Date</li>
    </ul>
  </li>
</ul>

<p><em>DAX Measures:</em> (always applies to the interval/date selected)<br />
<code class="language-plaintext highlighter-rouge">COGs = SUM(FACT_Sales[COGS_USD])</code>  # Cost of goods sold summed<br />
<code class="language-plaintext highlighter-rouge">Quantity = SUM(FACT_Sales[quantity])</code> # Quantity of units sold<br />
<code class="language-plaintext highlighter-rouge">Sales = SUM(FACT_Sales[Sales_USD])</code> # Sales amount<br />
<code class="language-plaintext highlighter-rouge">Gross Profit = [Sales] - [COGs]</code> # How much is made before EBITDA</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- PYTD_GrossProfit =
  CALCULATE( # shifts filter context to the same period in the last year (ex oct 22 if looking at oct 23)
    [Gross Profit],
    SAMEPERIODLASTYEAR(DIM_Date[Date]),
    DIM_Date[inPast] = TRUE
  )
- PYTD_Quantity = 
  CALCULATE(
    [Quantity],
    SAMEPERIODLASTYEAR(DIM_Date[Date]),
    DIM_Date[inPast] = TRUE
  )
- PYTD_Sales = 
  CALCULATE(
    [Sales],
    SAMEPERIODLASTYEAR(DIM_Date[Date]),
    DIM_Date[inPast] = TRUE
  )
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- YTD_GrossProfit = 
  TOTALYTD( # Sums the gross profit from the start of the year to the current context
    [Gross Profit],
    FACT_Sales[Date_Time]
  )
- YTD_Quantity = 
  TOTALYTD(
    [Quantity],
    FACT_Sales[Date_Time]
  )
- YTD_Sales = 
  TOTALYTD(
    [Sales],
    FACT_Sales[Date_Time]
  )
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- S_PYTD = 
  VAR selected_value = SELECTEDVALUE(SLC_Values[Values])
  VAR result = 
  SWITCH(
      selected_value,
      "Sales", [PYTD_Sales],
      "Quantity", [PYTD_Quantity],
      "Gross Profit", [PYTD_GrossProfit],
      BLANK()
  )
  RETURN result

- S_YTD = 
  VAR selected_value = SELECTEDVALUE(SLC_Values[Values])
  VAR result = 
  SWITCH(
      selected_value,
      "Sales", [YTD_Sales],
      "Quantity", [YTD_Quantity],
      "Gross Profit", [YTD_GrossProfit],
      BLANK()
  )
  RETURN result
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- YTD vs PYTD = [S_YTD] - [S_PYTD]
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>- GP% = DIVIDE(
    [Gross Profit],
    [Sales]
)
</code></pre></div></div>

<h3 id="visualizations"><em>Visualizations:</em></h3>
<ul>
  <li>Treemap chart - Month and Country by YTD vs PTYD</li>
  <li>Waterfall chart - Month, Country, Type, Name by YTD vs PYTD</li>
  <li>Line and Stacked Column chart - Quarter/Month by Value YTD (col) and Value PTYD (line) by Type</li>
  <li>Scatter chart - Value YTD vs GP% by Account - with segmentation through average lines</li>
</ul>

<h3 id="layout-and-final-touches"><em>Layout and Final Touches:</em></h3>
<ul>
  <li>Sort Measures by YTD or PYTD</li>
  <li>Organize Measure Switches Folder</li>
  <li>Build a background in powerpoint and use it as a PowerBI background image.</li>
  <li>Transparent backgrounds, rounded corners, conditional formatting</li>
  <li>Final fixes on titles and dynamic titles (uses <code class="language-plaintext highlighter-rouge">SELECTEDVALUE(SLC_Values[Values])</code>)
  _Column Title
  _Report Title
  _Scatter Title
  _Waterfall Title</li>
</ul>]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="powerbi" /><summary type="html"><![CDATA[Plant Co. Performance Dashboard. An example dataset from a fake company that sells real plants. The dashboard is interactive, so please click through to satisfy your curiosity (tip: the embedded dashboard can be resized to fit your full screen in the lower right corner).]]></summary></entry><entry><title type="html">Analyzing Camera Trap Pictures with AI</title><link href="http://localhost:4000/2025/05/22/camera-trap-computer-vision.html" rel="alternate" type="text/html" title="Analyzing Camera Trap Pictures with AI" /><published>2025-05-22T00:00:00-05:00</published><updated>2025-05-22T00:00:00-05:00</updated><id>http://localhost:4000/2025/05/22/camera-trap-computer-vision</id><content type="html" xml:base="http://localhost:4000/2025/05/22/camera-trap-computer-vision.html"><![CDATA[<p>Using SpeciesNet (AI) to sort through hundreds of thousands of wildlife pictures from motion detection cameras (camera traps).</p>

<p>Preview page created using Megadetector dev-tools on a subset of predictions.<br />
<a href="https://morescode-pm.github.io/urbanrivers-speciesnet-preview/">Urban Rivers - CamTrap AI Observations</a></p>

<p>SpeciesNet was described by Gadot et al.<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup></p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>Gadot, T., Istrate, Ș., Kim, H., Morris, D., Beery, S., Birch, T., &amp; Ahumada, J. (2024). <em>To crop or not to crop: Comparing whole-image and cropped classification on a large dataset of camera trap images.</em> IET Computer Vision. Wiley Online Library. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="deeplearning" /><category term="computervision" /><category term="conservation" /><summary type="html"><![CDATA[Using SpeciesNet (AI) to sort through hundreds of thousands of wildlife pictures from motion detection cameras (camera traps).]]></summary></entry><entry><title type="html">Data Science Salaries</title><link href="http://localhost:4000/2025/04/30/data-science-salaries.html" rel="alternate" type="text/html" title="Data Science Salaries" /><published>2025-04-30T00:00:00-05:00</published><updated>2025-04-30T00:00:00-05:00</updated><id>http://localhost:4000/2025/04/30/data-science-salaries</id><content type="html" xml:base="http://localhost:4000/2025/04/30/data-science-salaries.html"><![CDATA[<p>Finding myself in an unscheduled sabatical / job search I decided to upskill in Looker while reviewing Data Science Salaries in Chicago.</p>

<p>When asked really early, it’s easy to point to this and ask for a range within the 25pct to 75pct band of the listed salary or industry salaries.</p>

<p>Here’s the final dashboard:</p>

<iframe width="788" height="505" src="https://lookerstudio.google.com/embed/reporting/ab71852c-1d0d-4cb2-8146-0c20aff7b331/page/page_12345" frameborder="0" style="border:0" allowfullscreen="" sandbox="allow-storage-access-by-user-activation allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox"></iframe>

<h2 id="how-it-was-made">How it was made</h2>
<p>First I built a structured table in google sheets for each job I was interested and applied for.<br />
This included:<br />
job title, company, location, pay, listed_years_experience, connections, and key_skills_listed</p>

<p><img src="/assets/images/salaries/1_table.png" /></p>

<p>I then parsed that information just a little further by cleaning the pay ranges into minimum and maximum values. <code class="language-plaintext highlighter-rouge">=SPLIT(pay, "-")</code></p>

<p>Looker studio is a free version of Looker that has direct access to google sheets data and is accessible via the extensions menu.</p>

<p><img src="/assets/images/salaries/2_looker_connect.png" /></p>

<p>This forges a direct connection to the google sheets page &amp; allows you to just “refresh” your looker visual when new rows are added to the table. Pretty nice for being totally free.</p>

<p>All we needed here was a simple visual to display the salary ranges.<br />
To get a sense of their relative bands, I went with a box plot chart for the quartiles in each listed salary range.<br />
<br />
This required some fiddling with the settings but I eventually found that I could create some calculated fields and use the box plot chart. Since the data I’m using are just 1 row per salary, I needed to use a bit of DAX to generate my metrics.</p>

<p>For each 25 pctile: <code class="language-plaintext highlighter-rouge">((High Salary-Low Salary)*&lt;pctile&gt;)+Low Salary</code><br />
Then, the dimensions for drilling down I had were <code class="language-plaintext highlighter-rouge">sector</code> (A field I inferred from the title manually in the google sheet) and <code class="language-plaintext highlighter-rouge">Company, Title</code> another DAX field just doing: <code class="language-plaintext highlighter-rouge">CONCAT(Company,", ",Title)</code>.</p>

<p>Here’s what the final setup looked like:<br />
<img src="/assets/images/salaries/3_setup.png" /></p>

<p>Next we added some <strong>Style</strong> by adding reference lines and bands for the full visual.  Meaning each salary belongs to the set of salaries, and we can add a band for the average 25pct and 75pct (the interquartile range or IQR) for the entire dataset.  This plus my last base salary as a parameter added some context to the visual.</p>

<p>What I like most about the finished product is the ability to quickly see a breakdown for the full dataset as well as for each industry that I labeled. Here’s that drilled up view.</p>

<p><img src="/assets/images/salaries/4_drillup.png" /></p>

<p>In the visual we can see how tech salaries are generally higher, and food and public sectors are lower. Part of the reason for this is the bias I have on jobs that look interesting, but I think the trend would hold relatively well.</p>]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="jobs" /><category term="looker" /><category term="dax" /><summary type="html"><![CDATA[Finding myself in an unscheduled sabatical / job search I decided to upskill in Looker while reviewing Data Science Salaries in Chicago.]]></summary></entry><entry><title type="html">Blueberry Chihuahuas</title><link href="http://localhost:4000/2025/03/04/blueberry-chihuahuas.html" rel="alternate" type="text/html" title="Blueberry Chihuahuas" /><published>2025-03-04T00:00:00-06:00</published><updated>2025-03-04T00:00:00-06:00</updated><id>http://localhost:4000/2025/03/04/blueberry-chihuahuas</id><content type="html" xml:base="http://localhost:4000/2025/03/04/blueberry-chihuahuas.html"><![CDATA[<p>I decided to learn how to interact with computer vision models using the FastAI infrastructure.<br />
The coursework is taught by Jeremy Howard - former President and Chief Scientist at Kaggle and long time AI leader.</p>

<p>Here’s the embedded notebook for the first lesson (also available <a href="https://www.kaggle.com/code/morescope/is-it-a-chihuahua-or-blueberry-muffin">directly on Kaggle</a>).<br />
The goal was to learn how to use the fastai toolkit for a simple image classification problem.<br />
I chose a difficult task for humans to do: differentiate between chihuahuas and blueberry muffins.</p>

<iframe src="/assets/notebooks/html/blueberry-chihuahua.html" width="100%" height="900" style="border:1px solid #ccc; border-radius:8px;"></iframe>]]></content><author><name>Paul Moresco</name><email>hello@morescode-analytics.com</email></author><category term="deeplearning" /><category term="computervision" /><category term="pytorch" /><summary type="html"><![CDATA[I decided to learn how to interact with computer vision models using the FastAI infrastructure. The coursework is taught by Jeremy Howard - former President and Chief Scientist at Kaggle and long time AI leader.]]></summary></entry></feed>